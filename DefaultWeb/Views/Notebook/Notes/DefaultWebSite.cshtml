<div class="paper-wrapper">
    @*<span class="text-info text-muted float-right">September 4th, 2017</span>*@
    <div class="paper">
        <div class="note-heading">
            <h3>A Default WebSite.net Core</h3>
            <a href="https://github.com/SwartHack/defaultwebsite-core" target="_blank"><i class="fa fa-3x fa-github-square"></i></a>
        </div>

        <p class="discussion">
            This missive will go on a bit, as I add more content and detail. The purpose here is give descriptions and
            comments on the basic set-up, architecture and various patterns and practices investigated and demonstrated by Default WebSite.net.
            The different Sandpit discussions focus on the specific technology being applied by a particular demo.
        </p>
        <p class="disclaimer">
            Disclaimer - Nothing demonstrated here, nor the contents of any source code are guaranteed to any length.
            Scrutinizers of the source will notice a number of different approaches and maturities in the source. It may appear sometimes
            that Chef Boardee&trade; wrote the code. Please don't flame the code, everything is proto-type, pre-Alpha at best. And many times
            the scope of a particular demo will dictate how "slick" the code is. Code comments are continually being added and are tracked on
            GitHub. Comments will be incorporated soon, until then, hit up GitHub with any comments or feedback. Thank You for understanding! - The Management
        </p>
        <h4>Client Side Overview</h4>
        <p class="discussion">
            <span class=" emphasis-text">Why start with the client side? Honestly because</span> that is where most the development time is spent.
            Specifically using <span class="emphasis-brand">Bootstrap4b.5, SASS, Javascript, JQuery and KnockoutJS</span> to name a few.
            Developing not only the outward appearance, but the core structure, design and behavior of the entire client-side process; including responsive
            behavior and asynchronous processing. The other most time consuming aspect is the generation of actual content!
        </p>
        <div class="note-box">
            <div class="heading">
                <div class="title">A note on: CSS, Bootstrap, Bootswatch and media/device size</div>
            </div>
            <div class="body">
                <p class="discussion">
                    <span class="emphasis-text">The site integrates Bootstrap, but does </span>
                    not utilize much of its default theme styling. Relying more on the primary underlying framework functionality. There is no &ldquo;<strong>Default WebSite</strong>&rdquo;
                    theme, but there could be as 100% of the styling uses SASS stylesheets. Prior to the current version, the Bootswatch
                    themes were available but the latest release of Bootstrap beta 5 broke the automated Grunt routines. Apparently, they have dropped
                    Grunt to go with simply <strong>NPM</strong> and <em>package.json</em> scripts. The &ldquo;<strong>Theme Picker</strong>&rdquo; is disabled for the time being.
                </p>
                <p class="discussion">
                    <span class="emphasis-text">Currently, the recommended media device size is 1920x1080 or 1280x960,</span> and specifically targets
                    desktop and laptop form factors. Bootstrap does provide dynamic device view-port recognition and will attempt to adjust accordingly.
                    Usually by stacking everything vertically and enabling gestures on touch capable devices. Subsequent versions of <em><strong>Default WebSite</strong></em>
                    will attempt to accommodate smaller view-ports
                </p>
                <p class="discussion">
                    <span class="emphasis-text">The layout of Default WebSite does not afford itself easily</span> to the responsive features of <strong>Bootstrap</strong> and <strong>CSS</strong>.
                    The nature of a <strong>multi-container asynchronous</strong> design creates many different challenges that require a little extra effort.
                </p>
                <p class="discussion">
                    <span class="emphasis-text">One significant change in CSS styling, from previous versions</span>, is the use of responsive Font size based on the current view-port size,
                    and not on set media-size breakpoints. This is accomplished using the scale-based <em>height (vh)</em> and <em>width (vw)</em> CSS units.
                    There are drawbacks when view-port size approaches smaller devices as the text will become unreadable. This is resolved with appropriate min-size
                    CSS settings and maybe a few SASS variables. TBD&hellip;
                </p>
            </div>
        </div>
        <p class="discussion">Onward...</p>
        <p class="discussion">The client-side code lives in the project's <span class="emphasis-text">wwwroot/lib/_site</span> directory...</p>
        <p class="emphasis-list-item">
            <a href="https://github.com/SwartHack/defaultwebsite-core/tree/master/DefaultWeb/wwwroot/lib/_site" target="_blank"><i class="fa fa-github"></i> Client-side development directory</a>.
        </p>
        <p class="discussion">
            The client-side build process is detached from the project and not integrated into any IDE tools. Although convenient, they can tend to
            muck up the entire build process. This enables separate build events for client and server code, which facilitates development and debugging; as well as continuous integration management.
        </p>
        <p class="lead"> Here are a few key highlights to the process</p>
        <p class="exclamation">
            Bower is Obsolete
        </p>
        <strike>
            <p class="discussion">
                <span class="emphasis-leadin">Manage all the Bower packages using command-line</span>, from the project's default directory.
                This populates all the requisite <span class="emphasis-text">wwwroot/_site</span> contents, which the <span class="emphasis-text">wwwroot/_site</span>'s scripts require.
                The utilized Bower packages are listed in the project's &nbsp;
                <a href="https://github.com/SwartHack/defaultwebsite-core/blob/master/DefaultWeb/bower.json" target="_blank"><i class="fa fa-github"></i> bower.json file.</a>&nbsp;
            </p>
            <p class="discussion">
                If you downloaded the project and want to restore the bower packages simply open a command-line tool with Administrative privileges,
                in the project's root directory and execute the bower command:
            </p>
            <p class="code">&gt;\ bower install</p>
        </strike>
        <p class="discussion">
            <span class="emphasis-leadin">Manage the <span class="emphasis-text">wwwroot/_site</span> build process of CSS and Javascript</span>&nbsp;manually using
            <a class="link-brand" href="https://nodejs.org/en/download/" target="_blank">Node.js</a>,
            <a class="link-brand" href="https://www.npmjs.com/" target="_blank">npm</a> and
            <a class="link-brand" href="https://gruntjs.com/" target="_blank">Grunt</a>,
            from the command line in the <span class="emphasis-text">wwwroot/_site</span> directory. DO NOT USE npm in the project's root directory. It is advisable to avoid a "node_modules"
            directory in the project root!
        </p>
        <p class="discussion">
            To restore all of the required NPM packages, in the <span class="emphasis-text">wwwroot/_site</span> directory with the Admin command line execute (requires
            <a class="link-brand" href="https://nodejs.org/en/download/" target="_blank">Node.js</a> and
            <a class="link-brand" href="https://github.com/gruntjs/grunt-cli" target="_blank">grunt-cli</a>):
        </p>
        <p class="code">&gt;\ npm rebuild</p>
        <p class="emphasis-leadin">Notes on Grunt, SASS, CSS &amp; Bootstrap 4</p>
        <p class="discussion">
            CSS files are preprocessed and compiled using&nbsp;
            <a class="link-brand" href="https://github.com/gruntjs/grunt-contrib-sass" target="_blank">grunt-contrib-sass v1.0.0.</a>&nbsp;This is a node wrapper for using actual&nbsp;
            <a class="link-brand" href="http://www.ruby-lang.org/en/downloads/" target="_blank">Ruby</a>&nbsp;&nbsp;
            <a class="link-brand" href="http://sass-lang.com/download.html" target="_blank">SASS</a>&nbsp;compilers, and not an implementation of
            <a class="link-brand" href="http://sass-lang.com/libsass" target="_blank">LIBSASS</a>. To configure this component follow the instructions outlined in&nbsp;
            <a class="link-brand" href="https://github.com/gruntjs/grunt-contrib-sass" target="_blank">grunt-contrib-sass.</a>&nbsp;Make sure to be in the
            <span class="emphasis-text">wwwroot/_site</span> directory to run the command.
        </p>
        <p class="code">&gt;\ gem install sass</p>
        <p class="discussion">
            <a href="https://getbootstrap.com/" target="_blank">Bootstrap</a> provides the base styling and responsive functionality,
            but it is integrated into the SASS assembly process a little differently. The standard approach utilizes a CSS reference to a default&nbsp;
            bootstrap.css and then a reference to the "Site.css" for local customizations and overrides.
        </p>
        <p class="code">&lt;link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" /&gt;<br /> &lt;link rel="stylesheet" href="~/css/site.css" /&gt;</p>
        <p class="discussion">
            Here the process is reversed and the site.css becomes the root and only css file. At the SASS assembly level we reference only one source file. In this case, as illustrated in
            <a href="https://github.com/SwartHack/defaultwebsite-core/blob/master/DefaultWeb/wwwroot/lib/_site/sass/defaultwebsite.scss" target="_blank"><i class="fa fa-github"></i> defaultwebsite.scss</a>.
        </p>
        <p class="code">&lt;link rel="stylesheet" href="&amp ViewData["ThemeDevelopment"]" /&gt;</p>
        <p class="discussion">
            where "ThemeDevelopment" would&nbsp; indicate the default Bootstrap theme, "default", or a Bootswatch theme, i.e. "cerulean".&nbsp;BootSwatch themes for Bootstrap4 are incorporated into every build...
        </p>
        <p class="exclamation">
            Oh No! DOJO!?
        </p>
        <p class="discussion">
            <strike class="emphasis-leadin">
                Use
                <a class="link-brand" href="">Almond.js</a> and
                <a class="link-brand" href="">AMD</a>
            </strike> 
        </p>
        <p class="discussion">
            Throw in some
            <span class="emphasis-brand">JQuery, JQuery UI, Ajax/Json</span>
            <span class="emphasis-leadin">Build the Client</span>(this is always going to change...)
        </p>
        <p class="discussion">
            The <span class="emphasis-text">wwwroot/_site</span>
            <a href="https://github.com/SwartHack/defaultwebsite-core/blob/master/DefaultWeb/wwwroot/lib/_site/Gruntfile.js" target="_blank"><i class="fa fa-github"></i> gruntfile.js</a> and
            <a href="https://github.com/SwartHack/defaultwebsite-core/blob/master/DefaultWeb/wwwroot/lib/_site/package.json" target="_blank"><i class="fa fa-github"></i> package.json</a>
            run the show for grunt processing. If everything is installed and working, this&nbsp;command will build the default Bootstrap theme then lint and bundle the javascript.&nbsp;
        </p>
        <p class="code">&gt;/ grunt build</p>
        <p class="discussion">Inspecting the gruntfile illustrates many other command options for building the client-side components.</p>
        <p class="mussing">
            Ok, there are a <strong><em>number</em></strong> of <span class="emphasis">"client-side"</span> prerequisites!
            Which has become the nature of web client-side development nowadays. <span class="emphasis">What happened to the "Thin Client"?!</span>
            In the case of this site, only expect more to be added! &ldquo;The More The Merrier&rdquo;! Nice exposure to a variety of approaches&hellip;
        </p>
        <h4>Server-Side Overview - TODO</h4>
        <p><strong>ASP.NET Core Project Overview</strong> - IConfigurationRoot, IServiceCollection, IHostingEnvironment, UserManager, SignInManger, View Dependency Injections, Middleware and more&hellip;</p>
        <p><strong>Application Architecture Basics</strong>- Models, Controllers, Views&hellip;</p>
        <p><strong>EntityFramework and Sql Server 2017</strong></p>
        <p><strong>Application Data</strong> Account Manager, Sandpit, Adventure Works&hellip;</p>
        <p><strong>ArcGIS Enterprise Server and application API's</strong></p>
        <p><strong>Mobile form factors and serving mobile requests and data.</strong></p>
        <p><strong>.........................</strong></p>
        <p>&nbsp;</p>
        <p>&nbsp;</p>
    </div>
</div>