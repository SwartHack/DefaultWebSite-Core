<div class="paper-wrapper">
    <span class="text-info text-muted float-right">March-2016</span>
    <div class="paper">
        <h5 class="text-center">Document Archive Website Technical Discussion</h5>
        <blockquote class="blockquote"> Note from the Editors... This was originally posted on https://swartling-family.com
        as part of the "Geek Speek" content. It has been re-posted here for posterities sake...
        </blockquote>

        <p>
            This discussion addresses the technologies and techniques used to engineer, implement and deploy a scalable document archive web-site.
            A sample of this technology implemented can be seen at <a href="https://swartling-family.com">https://swartling-family.com</a>.
            This particular archive content relates to family history, but content can relate to any possible &ldquo;category&rdquo; of documents.
            Content also scales from 1 to nth number of files. Where n is only limited by the server configuration.
        </p>
        <p>
            <strong>
                The current version is designed and developed using <em>Microsoft&trade; Visual Studio Community 2015</em>, is supported
                by <em>Visual Studio Team Services </em>and powered by Microsoft&trade; C#, ASP.NET 4.6 and MVC 5 Web development technologies.
            </strong>
        </p>
        <p>
            <strong><em>Architecture design targets ASP.NET 4.6 Model-View-Controller (MVC 5) development framework </em></strong>as well as
            other web server and client development technologies. Web-site applications are physically powered by a <a href="/Home/About.cshtml">
                <strong><em>GoDaddy.com&trade;</em></strong>
            </a> <em>Microsoft Windows 2012&trade; and IIS 8&trade;</em> self-managed Virtual Private Server (VPS) environment.
            The server operates on an <em>Intel(r) Xeon(r) E5-2620 v3 2.4GHz</em> CPU platform with 3GB available memory and 90GB disk space.
            The server is configured with Azure&trade; web deploy services and all the required ASP.NET and MVC components. All of these factors combine to provide
            exceptional performance, stability, security and usability.
        </p>
        <p>
            <strong><em>Many different plug-in, packages, etc. were considered</em></strong> in the design. In this day and age, the task of actual development has become
            more of a puzzle task to identify and piece together existing solutions. It has become taboo to try to re-invent the wheel! With good reason, considering
            the huge movement in open-source and consortium managed projects over the last decade. Even Microsoft is in the game now providing many of the
            "pre-requisite" VS2015 packages in all of its development technologies and templates.
        </p>
        <p>
            <strong><em>These packages are downloaded, installed and managed</em></strong> with the VS NuGet Package Manager (PM). The NuGet PM provides access
            to literally 1000's of other client and server-side third-party packages for Visual Studio development and beyond. Many of these packages are
            utilized/defined as "pre-requisites" to VS20015 web development templates.
        </p>
        <p><strong>Application Architecture Basics</strong></p>
        <p>
            <strong><em>The terminology used should be somewhat recognized </em></strong>by the layman web developer and/or web technology enthusiast.
            Links are provided for most "terms" to relevant sites. For more info on ASP.NET and MVC start here:
        </p>
        <p>
            <strong><em>Model-View-Controller development approach and</em></strong> methodology has been around for some time. First possible effective IDE functionally
            implemented in Oracle J-Developer Studio and Microsoft Web Client Software Factory. Whomever named it kinda got it wrong (IMHO), the required approach is
            Model-&gt;Controller-&gt;View, but I guess MVC sounded better. Added to the mix is Model-View-View-Model (MVVM) client-side framework which provides
            dynamic UI data/control bindings; along with many other powerful client functionality.
        </p>
        <p>
            There are many products offering MVVM client frameworks: Angular, React, Ember, Polymer...the list goes on. The approaches utilized in the client-side
            development align to more standard and readily available technologies: Javascript, HTML5, JQuery, JQueryUI and Mobile, Bootstrap, FontAwesome and
            Knockout(provides a powerful and lightweight client MVVM model).
        </p>
        <p><strong>Server-Side Stuff</strong></p>
        <p>
            <strong><em>On the server-side, we have the</em></strong> aforementioned C#/ASP.NET MVC web application. Along with these core or &ldquo;foundation&rdquo;
            tools we can integrate a number of technologies offered by the NuGet Package Manager. In this instance the document archive server takes advantage of one
            particular Microsoft&trade; Open Source technology, which would be Open Web Interface for .NET (OWIN) <a href="http://owin.org/">http://owin.org/</a>
            and Microsoft&rsquo;s Open Source OWIN implementation with project <a href="https://www.asp.net/aspnet/overview/owin-and-katana">Katana</a>.
            Along with OAuth <a href="https://oauth.net/">https://oauth.net/</a>, the document archive server can ensure secure communications with web Social
            and Business Media services i.e. Facebook, Google, Microsoft Account, Twitter etc.; <strong><em>or your custom business/personal web services</em></strong>.
            Microsoft already packages all the OWIN functionality you really need. The following <em>OAuth and Owin Packages</em> are utilized by the document archive web server, and can be found
            at <a href="https://github.com/aspnet/AspNetKatana/">GitHub AspNet Katana project</a>&rArr;
        </p>

        <p text-center>&mdash;Microsoft.Owin Microsoft.Owin.Security.OAuth &mdash; Microsoft.Owin.Security.Google &mdash; Microsoft.Owin.Security.MicrosoftAccount &mdash; Microsoft.Owin.Security.FaceBook &mdash; Microsoft.Owin.Security.Twitter &mdash;</p>
        <p><strong>The Model</strong></p>
        <p>
            <strong><em>The &ldquo;Model&rdquo; of MVC defines a number of components and functionality</em></strong><strong>:</strong> Configuration, Entities,
            Repositories, Security, etc. All of which represent part of The Model. The first and most significant Model element is the Repository.
            A Repository is the go-between for Controllers and the back-end data source(s). In the case of document archive server&hellip;
        </p>
        @Html.Partial("~/Views/Rundowns/SnippetTmpl.cshtml", new DefaultWeb.Models.Snippet { Name = "RepositoryInt.html", Title = "Repository Class Interface" })
        @Html.Partial("~/Views/Rundowns/SnippetTmpl.cshtml", new DefaultWeb.Models.Snippet { Name = "RepositoryImp.html", Title = "Repository Class Implementation" })
        <p>
            <em>The "Model" in MVC contains the "Entities",</em> which typically represent a database and its contents: Tables, Rows, Cells etc; and manage the requests
            create/update/delete CRUD data actions. &ldquo;Entities&rdquo; or
        </p>
        <p><strong><em>No database or user registration requirement does not mean no "Entities"! The archive's physical file-system serves as the database.</em></strong></p>
        <p><strong><em>The primary "Entities" model the </em></strong>classic embedded and recursive approach to logically representing a file-system. Similar to the .NET Framework System.IO.Directory and System.IO.File classes.</p>
        @Html.Partial("~/Views/Rundowns/SnippetTmpl.cshtml", new DefaultWeb.Models.Snippet { Name = "ArchiveFile.html", Title = "Primary Entities ArchiveFolder and ArchiveFile" })
        @Html.Partial("~/Views/Rundowns/SnippetTmpl.cshtml", new DefaultWeb.Models.Snippet { Name = "CommentEtc.html", Title = "Comment And CodeFile Models" })
        <p><strong>The Controller</strong></p>
        <p>The Controller in MVC does just like it sounds. It receives requests, does the work and returns results. The results can come in myriad of different types and formats: HTML, FileStream, Json, etc. The following illustrates some typical uses of Controllers</p>
        @Html.Partial("~/Views/Rundowns/SnippetTmpl.cshtml", new DefaultWeb.Models.Snippet { Name = "Controller1.html", Title = "Returns a stream depending on file type" })
        @Html.Partial("~/Views/Rundowns/SnippetTmpl.cshtml", new DefaultWeb.Models.Snippet { Name = "Controller2.html", Title = "Returns a Json response" })
        @Html.Partial("~/Views/Rundowns/SnippetTmpl.cshtml", new DefaultWeb.Models.Snippet { Name = "JsonServer.html", Title = "Where GetJsonFile() is&hellip;" })
        <p><strong>The View</strong></p>
        <p>The Views process the results from a Controller and dynamically create what the end-users sees, a processed HTML5 page. A number of techniques are used in defining View content, but one of the most common is using Razor Views or .cshtml files. This allows server-side View content to be pre-processed, before being received by the client. The <strong>&amp;amp </strong>indicates server-side code.</p>
        @Html.Partial("~/Views/Rundowns/SnippetTmpl.cshtml", new DefaultWeb.Models.Snippet { Name = "RazorView.html", Title = "Main Razor View &ndash; calling other partial views " })</p>
        <p>We are not only limited to Razor in View content. The View is where we mix in the capabilities of the client-side packages. Augmenting ASP.NET and MVC server-side technologies is a robust set of client-side technology driving the browser. Everything leverages the best of the latest and greatest in web development technologies. <strong><em>Starting with <a href="https://en.wikipedia.org/wiki/HTML5">HTML5! </a></em></strong>&nbsp;<em>HTML5</em> defines the latest enhanced standards and foundations for web-page technology and specifications. Along with HTML5, client-side development also includes, but is not limited to:</p>
        <p><strong><em><a href="https://en.wikipedia.org/wiki/Font_Awesome">&bull;HTML5</a>&nbsp;&nbsp;</em></strong><strong><em><a href="https://en.wikipedia.org/wiki/JavaScript">&bull;Javascript</a>&nbsp;&nbsp;</em></strong><a style="font-weight: bold; font-style: italic;" href="https://en.wikipedia.org/wiki/JQuery">&bull;JQuery</a>&nbsp; &nbsp;<a style="font-weight: bold; font-style: italic;" href="https://en.wikipedia.org/wiki/JQueryUI">&bull;JQueryUI</a>&nbsp;&nbsp;<strong><em><a href="https://en.wikipedia.org/wiki/JQueryMobile">&bull;JQuery Mobile</a>&nbsp;&nbsp;</em></strong><strong><em><a href="https://en.wikipedia.org/wiki/JSON">&bull;Json </a>&nbsp;</em></strong><strong><em><a href="https://en.wikipedia.org/wiki/Ajax_(programming)">&bull;AJAX</a>&nbsp;&nbsp;</em></strong><strong><em><a href="https://en.wikipedia.org/wiki/Knockout_(web_framework)">&bull;Knockout/MVVM Framework</a>&nbsp;&nbsp;</em></strong><strong><em><a href="../Home/%20https:/en.wikipedia.org/wiki/Bootstrap_(front-end_framework)">&bull;Bootstrap</a>&nbsp;</em></strong><a href="http://lesscss.org/"><strong><em>&bull;Less</em></strong></a>&nbsp;&nbsp;<a href="http://sass-lang.com/"><strong><em>&bull;SASS</em></strong></a>&nbsp;<strong><em><a href="https://en.wikipedia.org/wiki/Font_Awesome">&bull;FontAwesome</a>&nbsp;</em></strong><strong><em><a href="https://github.com/requirejs/almond">&bull;AMD</a></em></strong></p>
        <p><strong>Some Ajax and Json</strong></p>
        <p>After a page loads, it needs to get information from the server without causing the entire page to reload. Using Ajax and Json is an effective approach. The following shows the client-side request, that the Controller example above responds to. It also shows using the returned &ldquo;data&rdquo; variable to populate part of the Knockoutjs model.</p>
        @Html.Partial("~/Views/Rundowns/SnippetTmpl.cshtml", new DefaultWeb.Models.Snippet { Name = "JsonClient.html", Title = "Ajax request and deferred response" })
        <p><strong>The MVVM &ndash; Using Knockout</strong></p>
        @Html.Partial("~/Views/Rundowns/SnippetTmpl.cshtml", new DefaultWeb.Models.Snippet { Name = "KnockDoc.html", Title = "src and friendly-name are bound to model" })
        <p><strong>Knockout Binding</strong><br /> <strong><em>Anything contained in ${..} refers to a knockout</em></strong> variable defined in the model.</p>
        @Html.Partial("~/Views/Rundowns/SnippetTmpl.cshtml", new DefaultWeb.Models.Snippet { Name = "KnockDoc.html", Title = "src and friendly-name are bound to model" })
        <p><strong><em>We can also use the model to dynamically create</em></strong> elements from a template. The for-each indicator defines an iterator to process the model&rsquo;s thumbnails array&hellip;</p>
        @Html.Partial("~/Views/Rundowns/SnippetTmpl.cshtml", new DefaultWeb.Models.Snippet { Name = "KnockThumb.html", Title = "Knockout variables" })
        <p><strong>Caching with Knockout</strong></p>
        <p>As illustrated by the preceding Thumbnail example, the arguments of the &ldquo;for-each&rdquo; statement contain the subscribed events of each elements. A revisit of A Simple Knockout Model shows the defined handlers and subscriptions that perform the caching process. This only illustrates a minutia of the full functionality of <em>Knockoutjs</em></p>
        @Html.Partial("~/Views/Rundowns/SnippetTmpl.cshtml", new DefaultWeb.Models.Snippet { Name = "model2.html", Title = " Model Events and Subscriptions" })
        <p><br /> <strong><em>Thumbnails are processed with</em></strong> an individual request for each specific thumbnail, and processed and responded <em>asynchronously</em>. After the thumbnail downloads, it displays as inactive, but is still click-able, as it is <em>Pre-fetching</em> referenced source file content into a temporary <em>HTML5</em> element defined by <em>JQuery</em>. <br /> <strong><em>This "temporary" element is </em></strong>unassociated with the current DOM and simply resides in memory. When a display action is requested, if the bound "src" value matches a temp <em>Knockout.js</em> element, the img contents are defined by the cached knockout values.</p>
        <p><em>Note: on pre-fetching and caching....</em></p>
        <p>Currently <strong>ONLY</strong> Image files are pre-fetched. Documents (PDFs) and Videos are not pre-fetched. On folders with a large amount of files pre-fetching is limited to displayed/visible thumbnails. (disclosure- there is a bug with caching in the current version, addressing in .NET Core migration&hellip;)</p>
        <p><strong>Styling with Bootstrap and LESS</strong></p>
        <p>The integration of Bootstrap takes a different approach than the standard Bootstrap.css and Site.css that overrides and defines the site&rsquo;s styling. In this case a Site.less imports bootstrap source, as well as other things, to define the top parent of the LESS compile process. This results in a single Site.css, and also makes compiling the Bootswatch themes into the site much easier.</p>
        @Html.Partial("~/Views/Rundowns/SnippetTmpl.cshtml", new DefaultWeb.Models.Snippet { Name = "SiteLess.html", Title = "Site Primary LESS file" })
        <p><strong>So that&rsquo;s about it for now! No big secrets here, just lots of work putting all the pieces of this big puzzle together in an effective way.</strong></p>
        <p><strong>So What Is Next?!?!?!</strong></p>
        <p><strong><em>Migrating to Visual Studio 2017 and .NET Core technologies!!!</em></strong><br /></p>
    </div>
</div>
