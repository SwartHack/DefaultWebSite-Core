<head>
    <style type="text/css">

 p.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:105%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;
	}
a:link
	{color:blue;
	text-decoration:underline;
	text-underline:single;
        }
        .auto-style1 {
            font-size: small;
        }
    </style>
</head>
<p align="center" class="MsoNormal" style="mso-margin-top-alt:auto;margin-right:
-4.5pt;mso-margin-bottom-alt:auto;text-align:center;line-height:normal">
    <b><span style="font-size:15.0pt;font-family:&quot;Times New Roman&quot;,serif;mso-fareast-font-family:
&quot;Times New Roman&quot;">Migrating Document Archive to .NET Core<o:p></o:p></span></b></p>
<p align="center" class="MsoNormal" style="margin-top:0in;margin-right:-4.5pt;
margin-bottom:0in;margin-left:0in;margin-bottom:.0001pt;text-align:center">
    <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal"><span style="font-size:12.0pt;line-height:105%;font-family:&quot;Times New Roman&quot;,serif">What is there to say about Visual Studio 2017™ and .NET Core? Except awesome!!!</span></i></b><span style="font-size:12.0pt;line-height:105%;font-family:&quot;Times New Roman&quot;,serif"><o:p></o:p></span></p>
<p class="MsoNormal" style="margin-right:-4.5pt">
    <span style="font-size:12.0pt;
line-height:105%;font-family:&quot;Times New Roman&quot;,serif"><strong><em>It seems Microsoft™ may have finally got it right! </em></strong>Conceding to the ever increasing omnipresence of “Open Source”; there was no choice but to embrace it, or eventually become obsolete. This discussion does not addresses, “What is .NET Core?” Learn all about it here: <a href="https://www.asp.net/core">The ASP.NET Core Site</a>!<o:p></o:p></span></p>
<p class="MsoNormal" style="margin-right:-4.5pt">
    <span style="font-size:12.0pt;
line-height:105%;font-family:&quot;Times New Roman&quot;,serif"><strong><em>Important to note that .NET Core technology applies to </em></strong>other C# templates/technologies. It actually defines an entirely new development and runtime framework replacing ASP.NET 4.6 and MVC 5. Learn all about it here: <a href="https://www.microsoft.com/net/core#windowsvs2017">The .NET Core Site</a>! Versioning of MVC has been absorbed into ASP.NET Core and is now identified as a package of .NET Core. Actually just about everything in VS2017 is now a package!<o:p></o:p></span></p>
<p class="MsoNormal" style="margin-right:-4.5pt">
    <span style="font-size:12.0pt;
line-height:105%;font-family:&quot;Times New Roman&quot;,serif"><strong><em>This discussion does highlight some areas of the migration </em></strong>that capitalize on the technologies and techniques offered by ASP.NET Core. The functional enhancements and additions to VS2017 are many. A big change is the addition of the “Bower Package Manager” and the distinction between client-side and server-side packages. This greatly enhances the design and control of the client-side build process. <o:p></o:p></span>
</p>
<p class="MsoNormal" style="margin-right:-4.5pt">
    <span style="font-size:12.0pt;
line-height:105%;font-family:&quot;Times New Roman&quot;,serif"><strong><em>Also well publicized are the many new multi-faceted templates</em></strong> offering support for many of the popular “Open Source” languages, platforms and servers: Unix/Linux, Ubuntu, iOS, Android, Apache and many more. This support is provided by the new .NET Core embedded Kestrel web server. Any .NET Core application can self-host web functionality.<o:p></o:p></span></p>
<p class="MsoNormal" style="margin-top:0in;margin-right:-4.5pt;margin-bottom:
0in;margin-left:0in;margin-bottom:.0001pt">
    <span style="font-size:12.0pt;
line-height:105%;font-family:&quot;Times New Roman&quot;,serif"><strong><em>Once we get into a ASP.NET Core Web Application (.NET Core)</em></strong> project template, we notice some big differences. One being that the MvcApplication and IAppBuilder classes are gone! And the global.asax file!! As well as just about anything familiar with the MVC5 startup and configuration. ASP.NET Core uses a simple program.cs, just like a console or forms application.</span> <o:p></o:p>
</p>
<p class="MsoNormal">
 @Html.Partial("~/Views/Home/CodeTemplate.cshtml", new DefaultWeb.Models.Entities.CodeFile { Name = "~/Html/ProgramCS.html" , Title = ".NET Core program.cs" })
</p>
<p class="MsoNormal" style="margin-top:0in;margin-right:-4.5pt;margin-bottom:
0in;margin-left:0in;margin-bottom:.0001pt">
    <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal"><span style="font-size:12.0pt;line-height:
105%;font-family:&quot;Times New Roman&quot;,serif">The MVC App_Start program folder has</span></i></b><span style="font-size:12.0pt;line-height:105%;font-family:&quot;Times New Roman&quot;,serif"> been replaced with the single Startup.cs. <o:p></o:p></span>
</p>
<p class="MsoNormal">
@Html.Partial("~/Views/Home/CodeTemplate.cshtml", new DefaultWeb.Models.Entities.CodeFile { Name = "~/Html/StartUpCS.html" , Title = "New Startup class" })
</p>
<p class="auto-style1" style="margin-top:0in;margin-right:-4.5pt;margin-bottom:
0in;margin-left:0in;margin-bottom:.0001pt"><strong><em>Client-side compiling, minification and bundling can be done manually</em></strong> with “Grunt” and Task Runner or in the new bundleconfig.json and compilerconfig.json files<em><strong>.</strong></em></p>
<p class="MsoNormal">
    @Html.Partial("~/Views/Home/CodeTemplate.cshtml", new DefaultWeb.Models.Entities.CodeFile { Name = "~/Html/JsonConfig.html" , Title = "The bundleconfig.json configuration file" })
</p>
<p class="MsoNormal" style="margin-top:0in;margin-right:-4.5pt;margin-bottom:
0in;margin-left:0in;margin-bottom:.0001pt">
    <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal"><span style="font-size:12.0pt;line-height:
105%;font-family:&quot;Times New Roman&quot;,serif">Framework container services defined in</span></i></b><span style="font-size:12.0pt;line-height:105%;font-family:
&quot;Times New Roman&quot;,serif"> Startup.ConfigureServices() provide global access and can now be “Injected” into Views.<o:p></o:p></span></p>
<p class="MsoNormal">
    @Html.Partial("~/Views/Home/CodeTemplate.cshtml", new DefaultWeb.Models.Entities.CodeFile { Name = "~/Html/Inject.html" , Title = "View Service Injection" })
</p>
<p class="MsoNormal" style="margin-top:0in;margin-right:-4.5pt;margin-bottom:
0in;margin-left:0in;margin-bottom:.0001pt">
    <span style="font-size:12.0pt;
line-height:105%;font-family:&quot;Times New Roman&quot;,serif"><strong><em>User Management is now much more efficien</em></strong>t as illustrated by the new _LoginPartial.cshtml<o:p></o:p></span></p>
<p class="MsoNormal">
    @Html.Partial("~/Views/Home/CodeTemplate.cshtml", new DefaultWeb.Models.Entities.CodeFile { Name = "~/Html/Inject2.html" , Title = "View Service Injection" })
<span style="font-size:12.0pt;
line-height:105%;font-family:&quot;Times New Roman&quot;,serif">
    <o:p>&nbsp;</o:p></span></p>
<p class="MsoNormal" style="margin-right:-4.5pt">
    <b style="mso-bidi-font-weight:
normal"><i style="mso-bidi-font-style:normal"><span style="font-size:12.0pt;
line-height:105%;font-family:&quot;Times New Roman&quot;,serif">This is just a small taste of the re-design and improvements</span></i></b><span style="font-size:
12.0pt;line-height:105%;font-family:&quot;Times New Roman&quot;,serif"> now in progress. Further development will also target C# 6, supporting  Open XML documents, user registration, public and private archive areas, Bootstrap4, enhanced social media integration, changing back-end from filesystem entities to database EntityFramework entities, etc...<o:p></o:p></span></p>
<p class="MsoNormal">
    <o:p>&nbsp;</o:p></p>
