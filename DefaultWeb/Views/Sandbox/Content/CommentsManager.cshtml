<p>
    The Comments Manager illustrates a prototype One-&gt;Many database record manager. It is loosley based on the
    <a href="https://docs.microsoft.com/en-us/ef/core/get-started/aspnetcore/existing-db" target="_blank">https://docs.microsoft.com/en-us/ef/core/get-started/aspnetcore/existing-db</a> sample.
    But uses &quot;Sources&quot; and &quot;Comments&quot;, instead of &quot;Blogs&quot; and &quot;Posts&quot;.
</p>
<p>
    The general idea is to manage user comments by &quot;source&quot;. Anything you could make a comment on: an entire page, a document,
    a file, a page element, a widget. Basically be able to attach &quot;Comment&quot; functionality to any site element,
    then view and manage it! Add and Delete work, but Edit is disabled for now...
</p>
<p>
    The original intent was to extend the sample, but embedded in an asynchronous container. I quickly ran into some
    <strong><em>MVC .Net Core</em></strong> issues with using any IEnumerable model collection. It appears there was a
    problem when using JQuery and Ajax in that the controller results always come back as just the IEnumerableType and not
    the List. Will re-visit in the AdventureWorks demos.
</p>

<p>
    Since the foundation of the site&#39;s primary asynchronous navigation was already based on <strong><em>JQuery/Ajax</em></strong> using a <strong><em>KnockoutJs MVVM </em></strong>model, I decided to move forward using
    Partial Razor Views and the MVVM.
</p>
Bootstrap 4 dropped "Panels", "Wells" and replaced them with "Cards". Cards and card elements are styled with flex. Things get a little tweaky when dealing with new Flex-Box patterns. You never seem to know exactly what its going to do...

There are a number of "Data Grids" and record browsers out there:

https://www.codeproject.com/Articles/1166225/NET-Core-Datagrid
http://mvcgrid.net/
https://datatables.net/
https://www.npmjs.com/package/jquery-view
http://js-grid.com/
https://datatables.net/examples/styling/bootstrap4.html
and many more...

But I was set on doing a basic home-grown record browser/manager. I was also determined to get a scrolling table to work in a flex-box, multi-container design. Not as easy as you may think. FInally had a break through with the help of this:

https://codepen.io/RajaJaganathan-1471687644/pen/qNZNZW

Even though it is single-container, I was able to implement in asynchronous container.

Knockout JS  not only provides the functionality for "Coments Mannager", but also controls the main asynchronous exchange and loading of data. Check out how the main navbar loads each root page with Ajax and Json.

See /wwwroot/_site for the model and the code...
<p>
    It definitely turned out interesting. Especially the <strong><em>Flex-box</em></strong> behavior in <a href="https://getbootstrap.com/docs/4.0/utilities/flex/" target="_blank">Bootstrap 4</a>. And I learned a number of things in the process. The Knockout ViewModel could use some optimization, but going forward with it for now.
    You will notice the use of pop-up dialogs for adding new records.
    Their styling stills needs some help but they illustrateis an experiment in unobtrusive validation functionality that has dogged me for some time. Here is what the modal dialogs are doing:
</p>
<ol>
    <li>The dialog is a shared container that make asynchronous requests for content based on type. This explains why the dialog body fills-in moments after the container (needs animation). This allows many modal dialogs to share the same modal container.</li>
    <li>Each record type is represented by a decorated model for database operations. In the past I found no easy way to use unobtrusive validation if not making Controller calls directly from Views. This demo illustrates effectively using unobtrusive validation using JQuery/Ajax Controller calls and PartialViews. </li>
</ol>
<p class="exclamation"> Jump into the code</p>
<p class="html-link"><a href="https://github.com/SwartHack/defaultwebsite-core/blob/master/DefaultWeb/Controllers/CommentsController.cs" target="_blank">/Controllers/CommentsController</a></p>
<p class="html-link"><a href="https://github.com/SwartHack/defaultwebsite-core/tree/master/DefaultWeb/Views/Comments" target="_blank">/Views/Comments</a></p>
<p class="html-link"><a href="https://github.com/SwartHack/defaultwebsite-core/blob/master/DefaultWeb/wwwroot/lib/_site/js/models.js" target="_blank">/wwroot/lib/_site/model</a></p>

<div class="h1 text-center">-Notes-</div>
<p>
    The Comments Manager MVC components do not utilize a repository. In this case mostly due to the simplicity of dealing with two tables.
    Also the use of a repository is not necessarily the best choice. See DefaultWebSite.net "Patterns &amp; Practices" Rundown for more on this...
</p>
<p>
    Also in question is the &#64;using" statement with DbContext manipulation. Most all MS .Net Core tutorials I have seen are using try {} catch {},
    as the default nature of the DBContext is a global assessor for any MVC EF Controller. More on this...
</p>