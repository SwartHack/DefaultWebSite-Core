//>>built
define("dojo/_base/lang dojo/io-query dojo/Deferred ../../core/Accessor ../../core/Evented ../../core/Promise ../../core/promiseUtils ../../core/watchUtils ../../core/Error".split(" "),function(d,k,g,l,m,n,h,p,f){return l.createSubclass([m,n],{declareSubclass:"esri.layers.support.WebSocketConnector",initialize:function(){var a=null;if(this.socketUrls.length||(a=Error("No urls passed to WebSocketConnector. No live connection possible")),"WebSocket"in window||(a=Error("The browser does not support Web Sockets. No live connection possible")),
a){var b=new g;this.addResolvingPromise(b.promise);b.reject(a)}this.queryParams&&this.queryParams.token&&this._set("tokenNeeded",!0)},_socket:null,_connectPromise:null,_disconnectPromise:null,properties:{currentSocketUrl:{value:null,readOnly:!0},queryParams:null,socketUrls:{value:[]},tokenNeeded:{value:!1},connectionError:{value:null,type:f,readOnly:!0},connectionStatus:{value:"disconnected",readOnly:!0}},connect:function(){var a=this.connectionStatus;return"connected"===a||"connecting"===a?this._connectPromise:
"disconnected"===this.connectionStatus?(this._set("connectionStatus","connecting"),this._connect()):"disconnecting"===this.connectionStatus?(this._connectPromise=null,this._disconnectPromise||(this._disconnectPromise=p.once(this,"connectionStatus").then(function(a){return"disconnected"===a.value?this._connect():void 0}.bind(this))),this._disconnectPromise):void 0},disconnect:function(){var a=this.connectionStatus;"connected"===a?(this._set("connectionStatus","disconnecting"),this._socket?this._socket.close():
this._set("connectionStatus","disconnected")):"connecting"===a&&this._connectPromise.then(function(){this.disconnect()}.bind(this))},send:function(a){this._socket&&("object"==typeof a&&(a=JSON.stringify(a)),this._socket.send(a))},_connect:function(){this._connectPromise&&(this._connectPromise=null);var a=new g;return this._connectPromise=a,this._getWebSocketToken().then(function(a){a&&(this.queryParams.token=a);a=this._makeCurrentUrl();a=new WebSocket(a);a.onopen=d.hitch(this,this._handleSocketOpen);
a.onclose=d.hitch(this,this._handleSocketClose);a.onmessage=d.hitch(this,this._handleSocketMessage);this._socket=a}.bind(this)).otherwise(function(a){a=new f("web-socket-connector:connect","Could not get websocket token for secured service",a);this._set("connectionError",a);this._connectPromise.reject(a)}.bind(this)),a.promise},_getWebSocketToken:function(){var a=this.queryParams,a=a&&a.token,b=this.tokenNeeded;return a?h.resolve(a):b?this.layerSource.getWebSocketToken():h.resolve()},_makeCurrentUrl:function(){var a,
b,c,d=this.queryParams,e=this.socketUrls;return 1!==e.length&&this.currentSocketUrl?(a=e.indexOf(this.currentSocketUrl),b=a>=e.length-1?0:a+1,c=e[b]):c=e[0],this._set("currentSocketUrl",c),d&&(c+="?"+k.objectToQuery(d)),c},_handleSocketOpen:function(){this._set("connectionStatus","connected");this._set("connectionError",null);this._disconnectPromise=null;this._connectPromise&&this._connectPromise.resolve()},_handleSocketClose:function(a){var b,c=null;this.queryParams&&(this.queryParams.token=null);
(!a.wasClean||a.code)&&(1001===a.code?b="Service is going away.":4400===a.code?b=a.reason||"Invalid url parameters. Check filter properties.":4404===a.code?b="Service not found":4401===a.code||4403===a.code?b="Not authorized":a.wasClean||(b=a.reason||"Unknown reason"),b&&(c=new f("web-socket-connector:connection closed","Connection failed: "+b),this._set("connectionError",c),this._connectPromise&&this._connectPromise.reject(c)));this._connectPromise=null;this._set("connectionStatus","disconnected");
this._socket=null},_handleSocketMessage:function(a){this.emit("data-received",a.data)}})});