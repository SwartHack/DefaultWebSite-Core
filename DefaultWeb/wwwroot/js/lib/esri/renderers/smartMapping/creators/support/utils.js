//>>built
define("require exports dojo/_base/lang ../../../../core/Error ../../../../core/numberUtils ../../../../core/promiseUtils ../../../../Color ../../statistics/support/utils ../../../../symbols/SimpleMarkerSymbol ../../../../symbols/SimpleLineSymbol ../../../../symbols/SimpleFillSymbol ../../../../symbols/PointSymbol3D ../../../../symbols/IconSymbol3DLayer ../../../../symbols/ObjectSymbol3DLayer ../../support/utils ../../../../symbols/MeshSymbol3D ../../../../symbols/FillSymbol3DLayer ../../../support/pointCloud/PointSizeSplatAlgorithm ../../statistics/classBreaks".split(" "),
function(G,f,q,r,k,t,u,v,w,x,y,l,z,A,B,C,D,E,m){function h(a,c){return new r(a,c)}function n(a,c,d){var b,e;c=v.getSuggestedDataRange({statistics:a,isDate:c});return c.defaultValuesUsed?(b=c.min,e=c.max):!d||null!=a.avg&&a.stddev||(b=a.min,e=a.max),null!=b?[b,e]:null}function F(a){var c=a.layer;return a.fields.filter(function(a){a=c.getFieldUsageInfo(a);return!a||!a.supportsRenderer})}Object.defineProperty(f,"__esModule",{value:!0});var p=/^(\d+(\.\d+)?)\s*(%)$/i;f.createError=h;f.getDefaultDataRange=
n;f.createColors=function(a,c){for(var d=[],b=a.length,e=0;c>e;e++)d.push(new u(a[e%b]));return d};f.createStopValues=function(a,c){void 0===c&&(c=!0);var d=a.avg,b=d-a.stddev,e=d+a.stddev;b<a.min&&(b=a.min);e>a.max&&(e=a.max);c&&(d=b+(e-b)/2);a=k.round([b,e],{strictBounds:!0});return b=a[0],e=a[1],a=[b,b+(d-b)/2,d,d+(e-d)/2,e],k.round(a,{strictBounds:!0})};f.createSymbol=function(a,c,d,b,e,f){var g;switch(d){case "point":case "multipoint":d=null!=f?f:a.size;"2d"===b?g=new w({color:c,size:d,outline:{color:a.outline.color,
width:a.outline.width}}):"3d-flat"===b?g=new l({symbolLayers:[new z({size:d,resource:{primitive:"circle"},material:{color:c},outline:{color:a.outline.color,size:a.outline.width}})]}):-1<b.indexOf("3d-volumetric")&&(g=new l({symbolLayers:[new A({height:d,resource:{primitive:"3d-volumetric-uniform"===b?"sphere":"cylinder"},material:{color:c}})]}));break;case "polyline":a=null!=f?f:a.width;"2d"===b&&(g=new x({color:c,width:a}));break;case "polygon":"2d"===b&&(g=new y({color:c,outline:{color:a.outline.color,
width:a.outline.width}}));break;case "mesh":g=new C({symbolLayers:[new D({material:{color:c,colorMixMode:e}})]})}return g};f.verifyBasicFieldValidity=function(a,c,d){var b=B.getUnknownFields({layer:a,fields:c});if(b.length)return h(d,"Unknown fields: "+b.join(", ")+". You can only use fields defined in the layer schema");a=F({layer:a,fields:c});return a.length?h(d,"Unsupported fields: "+a.join(", ")+". You can only use fields that are accessible to the renderer i.e. FieldUsageInfo.supportsRenderer must be true"):
void 0};f.getClassBreaks=function(a){return m(a).then(function(c){var d,b=n({min:c.minValue,max:c.maxValue,avg:null,stddev:null},!1,!1);return d=b?m(q.mixin(a,{classificationMethod:"equal-interval",numClasses:1,analyzeData:!1,minValue:b[0],maxValue:b[1],normalizationTotal:b[0]+b[1]})):t.resolve(c),d.then(function(a){return{result:a,defaultValuesUsed:!!b}})})};f.isValidPointSize=function(a){return p.test(a)};f.getPointSizeAlgorithm=function(a){a=a.match(p);var c=Number(a[1]);return"%"===a[3]?new E["default"]({scaleFactor:c/
100,minSize:1.1}):void 0}});