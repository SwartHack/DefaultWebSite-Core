//>>built
define("require exports ../../../../core/tsSupport/extendsHelper dojo/_base/lang ./Util ../../../webgl/Program ./DefaultVertexAttributeLocations".split(" "),function(r,t,u,n,h,p,q){return function(){function m(a,b,c,e,k,f,d){this.variables=[];this.sealed=!1;this.programCache={};h.assert(2===b.length,"you must specify shader snippet prefixes for vertex and fragment shaders");this.programNamePrefix=a;this.shaderSnippetPrefixes=b;this.baseDefines=c;this.programRep=e;this.snippets=f;this.rctx=d;this.baseDefines=
c?c.slice():[]}return m.prototype.addDefine=function(a,b,c,e){h.assert(!this.sealed,"you cannot add another variable after the first program has been generated");h.assert(!!a,"you must specify a program name suffix");this.variables.push({programNameSuffixes:["",a],shaderNameSuffixes:e||a,defineStr:b,affectsShaderTypes:c||[!0,!0]})},m.prototype.addBinaryShaderSnippetSuffix=function(a,b,c){h.assert(!this.sealed,"you cannot add another variable after the first program has been generated");h.assert(!!a,
"you must specify a program name suffix");this.variables.push({programNameSuffixes:["",a],shaderSnippetSuffixes:["",b],affectsShaderTypes:c||[!0,!0]})},m.prototype.addNaryShaderSnippetSuffix=function(a,b){h.assert(!this.sealed,"you cannot add another variable after the first program has been generated");var c=a.map(function(a){return h.assert(null!=a.value,"value must always be specified"),a.value});this.variables.push({values:c,programNameSuffixes:a.map(function(a,b){return null!=a.programNameSuffix?
a.programNameSuffix:c[b]}),shaderSnippetSuffixes:a.map(function(a,b){return null!=a.shaderSnippetSuffix?a.shaderSnippetSuffix:c[b]}),affectsShaderTypes:b||[!0,!0]})},m.prototype.getShaderVariation=function(a){h.assert(a.length===this.variables.length,"you must specify a value for each variable");for(var b=this.programNamePrefix,c=n.clone(this.shaderSnippetPrefixes),e=n.clone(this.shaderSnippetPrefixes),k=n.clone(this.baseDefines),f=0;f<this.variables.length;f++){var d=this.variables[f],g=a[f],l=void 0;
d.values?(l=d.values.indexOf(g.toString()),h.assert(0<=l,"invalid value "+g+" for variable "+f)):l=g?1:0;b+=d.programNameSuffixes[l];for(g=0;2>g;g++)d.affectsShaderTypes[g]&&(d.shaderSnippetSuffixes&&(c[g]+=d.shaderSnippetSuffixes[l],e[g]+=d.shaderSnippetSuffixes[l]),d.defineStr&&l&&(k.push(d.defineStr),e[g]+=d.shaderNameSuffixes))}return{programName:b,shaderSnippetNames:c,shaderNames:e,defines:k}},m.prototype.getProgram=function(a,b,c){void 0===b&&(b=this.snippets);void 0===c&&(c=this.rctx);this.sealed=
!0;var e=a.reduce(function(a,b){return a+b.toString()},"");if(this.programCache[e])return this.programCache[e];a=this.getShaderVariation(a);var k=this.programRep.get(a.programName);if(k)return k;var f=a.shaderSnippetNames[0],d=b[f];h.assert(null!=d,"shader snippet '"+f+"' does not exist");f=a.shaderSnippetNames[1];b=b[f];return h.assert(null!=b,"shader snippet '"+f+"' does not exist"),k=new p(c,d,b,q.Default3D,a.defines),this.programCache[e]=k,this.programRep.add(a.programName,k),k},m}()});