//>>built
require({cache:{"url:esri/views/3d/webgl-engine/materials/RibbonLineMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\n\n\x3csnippets\x3e\n\n\x3csnippet name\x3d"vsRibbonLine"\x3e\x3c![CDATA[\n  $vsprecisionf\n\n\tuniform mat4 proj;\n\tuniform mat4 view;\n\tuniform mat4 model;\n\n\tuniform float extLineWidth;\n\tuniform float nearPlane;\n\n\tattribute vec3 $position;\n\tattribute vec2 $uv0;\n\tvarying vec2 vtc;\n\n\tattribute vec4 $color;\n\tvarying vec4 vColor;\n\n\tattribute float size;\n\n#ifndef WALL\n\tuniform float miterLimit;\n\tattribute vec3 $auxpos1;\n\tattribute vec3 $auxpos2;\n#endif\n\n#ifdef SCREENSCALE\n\tuniform vec2 screenSize;\n\t$toScreenCoords\n#define VECTYPE vec2\n#define ZEROVEC vec2(0.0, 0.0)\n#define PERPENDICULAR(v) vec2(v.y, -v.x);\n#define ISOUTSIDE (left.x * right.y - left.y * right.x)*$uv0.y \x3e 0.0\n\n#else //ifdef SCREENSCALE\n\n#define VECTYPE vec3\n#define ZEROVEC vec3(0.0, 0.0, 0.0)\n// these macros are only valid for "strip" type lines:\n#define PERPENDICULAR(v) cross(up/*vec3(0.0, 1.0, 0.0)*/, v)\n#define ISOUTSIDE dot(cross(left, right), up/*vec3(0.0, 1.0, 0.0)*/)*$uv0.y \x3c 0.0\n\n#endif //ifdef SCREENSCALE\n\n\tfloat interp(float ncp, vec4 a, vec4 b) {\n\t\treturn (-ncp - a.z) / (b.z - a.z);\n\t}\n\n#ifdef SCREENSCALE\n\n  void clipAndTransform(inout vec4 pos, inout vec4 prev, inout vec4 next) {\n\t\tfloat vnp \x3d nearPlane*0.99;\n\n\t\t//We have four vertices per point on the line. Start and end vertices\n\t\t//are treated differently --\x3e d \x3e 0, d \x3c 0\n\t\tfloat d \x3d abs($uv0.y) - 1.1;\n\n\t\t//current pos behind ncp --\x3e we need to clip\n\t\tif(pos.z \x3e -nearPlane) {\n\t\t\tif (d \x3c 0.0) {\n\t\t\t\t//previous in front of ncp\n\t\t\t\tif(prev.z \x3c -nearPlane) {\n\t\t\t\t\tpos \x3d mix(prev, pos, interp(vnp, prev, pos));\n\t\t\t\t\tnext \x3d pos;\n\t\t\t\t} else {\n\t\t\t\t  pos \x3d vec4(0, 0, 0, 1);\n\t\t\t  }\n\t\t\t}\n\t\t\t//next in front of ncp\n\t\t\tif(d \x3e 0.0) {\n\t\t\t\tif(next.z \x3c -nearPlane) {\n\t\t\t\t\tpos \x3d mix(pos, next, interp(vnp, pos, next));\n\t\t\t\t\tprev \x3d pos;\n\t\t\t\t} else {\n\t\t\t\t\tpos \x3d vec4(0, 0, 0, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\telse {\n\t\t\t//current position visible\n\t\t\t//previous behind ncp\n\t\t\tif (prev.z \x3e -nearPlane) {\n\t\t\t\tprev \x3d mix(pos, prev, interp(vnp, pos, prev));\n\t\t\t}\n\t\t\t//next behind ncp\n\t\t\tif (next.z \x3e -nearPlane) {\n\t\t\t\tnext \x3d mix(next, pos, interp(vnp, next, pos));\n\t\t\t}\n\t\t}\n\n\t\tpos\x3d proj * pos;\n\t\tpos.xy *\x3d screenSize;\n\t\tpos /\x3d pos.w;\n\n\t\tnext \x3d proj * next;\n\t\tnext.xy *\x3d screenSize;\n\t\tnext /\x3d next.w;\n\n\t\tprev \x3d proj * prev;\n\t\tprev.xy *\x3d screenSize;\n\t\tprev /\x3d prev.w;\n  }\n\n#endif // SCREENSCALE\n\n\tvoid main(void) {\n\n\tfloat lineWidth \x3d extLineWidth + $size;\n\n#ifdef SCREENSCALE\n\n#if 0\n\t\tvec4 pos \x3d toScreenCoords($position.xyz);\n\t\tvec2 left \x3d (pos - toScreenCoords($auxpos1)).xy;\n\t\tvec2 right \x3d (toScreenCoords($auxpos2) - pos).xy;\n#else\n\t\tvec4 pos  \x3d view * vec4((model * vec4($position.xyz, 1.0)).xyz, 1.0);\n\t\tvec4 prev \x3d view * vec4((model * vec4($auxpos1.xyz, 1.0)).xyz, 1.0);\n\t\tvec4 next \x3d view * vec4((model * vec4($auxpos2.xyz, 1.0)).xyz, 1.0);\n\n\t\tclipAndTransform(pos, prev, next);\n\n\t\tvec2 left \x3d (pos - prev).xy;\n\t\tvec2 right \x3d (next - pos).xy;\n#endif\n\n#else // ifdef SCREENSCALE\n\t\tvec4 pos \x3d vec4($position, 1.0);\n#ifndef WALL\n\t\tvec3 left \x3d $position.xyz - $auxpos1;\n\t\tvec3 right \x3d $auxpos2 - $position.xyz;\n\t\tvec3 up \x3d normalize($position.xyz);\n#endif // ifndef WALL\n#endif // ifdef SCREENSCALE\n\n#ifdef WALL\n\t\tfloat displacementLen \x3d lineWidth;\n\t\tvec3 displacementDir \x3d normalize($position.xyz);//vec3(0.0, 1.0, 0.0);\n#else // ifdef WALL\n\n\t\tfloat leftLen \x3d length(left);\n\t\tleft \x3d (leftLen \x3e 0.001) ? left/leftLen : ZEROVEC;\n\n\t\tfloat rightLen \x3d length(right);\n\t\tright \x3d (rightLen \x3e 0.001) ? right/rightLen : ZEROVEC;\n\n\t\t// determine if vertex is on the "outside or "inside" of the join\n\t\tbool isOutside \x3d ISOUTSIDE;\n\n\t\t// compute miter join position first\n\t\tfloat displacementLen \x3d lineWidth;\n\t\tVECTYPE displacementDir \x3d normalize(left + right);\n\t\tdisplacementDir \x3d PERPENDICULAR(displacementDir);\n\t\tif (leftLen \x3e 0.001 \x26\x26 rightLen \x3e 0.001) {\n\t\t\tfloat nDotSeg \x3d dot(displacementDir, left);\n\t\t\tdisplacementLen /\x3d length(nDotSeg*left - displacementDir);\n\n\t\t\t// limit displacement of inner vertices\n\t\t\tif (!isOutside)\n\t\t\t\tdisplacementLen \x3d min(displacementLen, min(leftLen, rightLen)/abs(nDotSeg));\n\t\t}\n\n\t\tif (isOutside \x26\x26 (displacementLen \x3e miterLimit*lineWidth)) {\n\t\t\t// convert to bevel join if miterLimit is exceeded\n\t\t\tif (leftLen \x3c 0.001)\n\t\t\t    displacementDir \x3d right;\n\t\t\telse if (rightLen \x3c 0.001)\n\t\t\t\tdisplacementDir \x3d left;\n\t\t\telse\n\t\t\t\tdisplacementDir \x3d (abs($uv0.y) - 1.1 \x3c 0.0) ? left : right;\n\t\t\tdisplacementDir \x3d normalize(displacementDir);\n\t\t\tdisplacementDir \x3d PERPENDICULAR(displacementDir);\n\t\t\tdisplacementLen \x3d lineWidth;\n\t\t}\n\n#endif // ifdef WALL\n\n#ifdef SCREENSCALE\n\t\tpos.xy +\x3d displacementDir * floor($uv0.y + 0.5) * displacementLen;\n\t\tpos.xy /\x3d screenSize;\n#else\n\t\tpos.xyz +\x3d displacementDir * floor($uv0.y + 0.5) * displacementLen;\n\t\tpos \x3d proj * view * model * pos;\n#endif\n\n\t\tvtc \x3d $uv0;\n\t\tvColor \x3d $color * 0.003921568627451; // \x3d 1/255\n\t\tgl_Position \x3d pos;\n\t}\n]]\x3e\x3c/snippet\x3e\n\n\n\x3csnippet name\x3d"fsRibbonLine"\x3e\x3c![CDATA[\n  $fsprecisionf\n\n\tuniform vec4 eColor;\n\tvarying vec4 vColor;\n\tvarying vec2 vtc;\n\n#ifdef STIPPLE\n  uniform float stippleLengthDoubleInv;\n#endif\n\n\tvoid main() {\n\n#ifdef STIPPLE\n    if (fract(vtc.x * stippleLengthDoubleInv) \x3e 0.5) {\n      discard;\n    }\n#endif\n\n    gl_FragColor \x3d eColor * vColor;\n\t}\n]]\x3e\x3c/snippet\x3e\n\n\x3csnippet name\x3d"fsRibbonLineHighlight"\x3e\x3c![CDATA[\n\t$fsprecisionf\n\n#ifdef STIPPLE\n  uniform float stippleLengthDoubleInv;\n#endif\n\n\tvoid main() {\n#ifdef STIPPLE\n    if (fract(vtc.x * stippleLengthDoubleInv) \x3e 0.5) {\n      discard;\n    }\n#endif\n\n\t\tgl_FragColor \x3d vec4(1.0, 1.0, 1.0, 1.0);\n\t}\n]]\x3e\x3c/snippet\x3e\n\n\x3c/snippets\x3e\n'}});
define("require exports ../../../../core/tsSupport/extendsHelper dojo/text!./RibbonLineMaterial.xml ./internal/MaterialUtil ./internal/MaterialBase ./internal/GLMaterialBase ../lib/Util ../lib/gl-matrix ../lib/RenderSlot ../lib/ComponentUtils ../lib/DefaultVertexBufferLayouts ../lib/ShaderVariations ../../../webgl/Util".split(" "),function(D,X,B,N,A,O,E,r,h,F,P,Q,G,H){D=function(x){function g(a,b){b=x.call(this,b)||this;return b.params=A.copyParameters(a,R),"miter"!==b.params.join&&(b.params.miterLimit=
0),b.numVertsAtJoin="wall"===b.params.type?2:4,b.numVertsAtCap=2,b.canBeMerged="screen"===b.params.type&&null==b.params.stippleLength,b}return B(g,x),g.prototype.setColor=function(a){this.params.color=a;this.notifyDirty("matChanged")},g.prototype.getColor=function(){return this.params.color},g.prototype.dispose=function(){},g.prototype.getParams=function(){return this.params},g.prototype.getParameterValues=function(){var a=this.params;return{color:a.color,width:a.width,type:a.type,join:a.join,polygonOffset:a.polygonOffset,
miterLimit:a.miterLimit,stippleLength:a.stippleLength}},g.prototype.setParameterValues=function(a){for(var b in a)r.assert("type"!==b,"RibbonLineMaterial: type cannot be changed after creation"),r.assert("stippleLength"!==b||null!=a[b]==(null!=this.params[b]),"RibbonLineMaterial: stippleLength on/off cannot be changed after creation"),this.params[b]=a[b];"miter"!==this.params.join&&(this.params.miterLimit=0);this.notifyDirty("matChanged")},g.prototype.getOutputAmount=function(a){a=(a/2+1-2)*this.numVertsAtJoin+
2*this.numVertsAtCap;return this.canBeMerged&&(a+=2),a*H.getStride(I)/4},g.prototype.getInstanceBufferLayout=function(){},g.prototype.getVertexBufferLayout=function(){return"wall"===this.params.type?S:I},g.prototype.fillInterleaved=function(a,b,f,c,e,d){f=a.vertexAttr[r.VertexAttrConstants.POSITION].data;c=a.vertexAttr[r.VertexAttrConstants.COLOR]?a.vertexAttr[r.VertexAttrConstants.COLOR].data:T;var g=a.vertexAttr[r.VertexAttrConstants.SIZE]?a.vertexAttr[r.VertexAttrConstants.SIZE].data:U;(a=a.indices&&
a.indices[r.VertexAttrConstants.POSITION])&&a.length!==2*(f.length/3-1)&&console.warn("RibbonLineMaterial does not support indices");"wall"===this.params.type?this.fillWithoutAuxpos(f,b,e,d):this.fillWithAuxpos(f,c,g,b,e,d)},g.prototype.intersect=function(a,b,f,c,e,d,g,J){if(c.isSelection&&!P.isAllHidden(b.componentVisibilities,a.data.componentOffsets)){var k,m;b=a.getData();a=b.getVertexAttr()[r.VertexAttrConstants.POSITION].data;b=b.getVertexAttr()[r.VertexAttrConstants.SIZE];b=(b&&b.data[0])+this.params.width;
e=Number.MAX_VALUE;d=c.camera;J=c.point;for(var n=0;n<a.length-5;n+=3){if(l[0]=a[n],l[1]=a[n+1],l[2]=a[n+2],h.mat4d.multiplyVec3(f,l),p[0]=a[n+3],p[1]=a[n+4],p[2]=a[n+5],h.mat4d.multiplyVec3(f,p),d.projectPoint(l,y),d.projectPoint(p,z),0>y[2]&&0<z[2])h.vec3d.subtract(l,p,q),k=d.frustumPlanes,m=-(h.vec3d.dot(k[4],l)+k[4][3]),k=m/h.vec3d.dot(q,k[4]),h.vec3d.scale(q,k,q),h.vec3d.add(l,q,l),d.projectPoint(l,y);else if(0<y[2]&&0>z[2])h.vec3d.subtract(p,l,q),k=d.frustumPlanes,m=-(h.vec3d.dot(k[4],p)+k[4][3]),
k=m/h.vec3d.dot(q,k[4]),h.vec3d.scale(q,k,q),h.vec3d.add(p,q,p),d.projectPoint(p,z);else if(0>y[2]&&0>z[2])continue;k=r.pointLineSegmentDistance2D(y,z,J);e>k&&(e=k,h.vec3d.set(l,K),h.vec3d.set(p,L))}f=c.p0;c=c.p1;b/2+4>e&&(a=r.lineSegmentLineSegmentDistance3D(K,L,f,c),b=Number.MAX_VALUE,a[0]&&(h.vec3d.subtract(a[2],f,C),b=h.vec3d.length(C)/h.vec3d.dist(f,c)),g(b,C))}},g.prototype.getGLMaterials=function(){return{color:V,depthShadowMap:void 0,normal:void 0,depth:void 0,highlight:W}},g.prototype.getAllTextureIds=
function(){return[]},g.prototype.fillWithAuxpos=function(a,b,f,c,e,d){var g=a.length/3,h=a[0],k=a[1],m=a[2],n=0,M=d,r=H.getStride(this.getVertexBufferLayout())/4;this.canBeMerged&&(d+=r);c&&(h=c[0]*h+c[4]*k+c[8]*m+c[12],k=c[1]*h+c[5]*k+c[9]*m+c[13],m=c[2]*h+c[6]*k+c[10]*m+c[14]);var l=h,p=k,q=m,u=a[3],v=a[4],w=a[5];c&&(u=c[0]*u+c[4]*v+c[8]*w+c[12],v=c[1]*u+c[5]*v+c[9]*w+c[13],w=c[2]*u+c[6]*v+c[10]*w+c[14]);for(var t=0;g>t;t++){var x=3*t;g-1>t&&(u=a[x+3],v=a[x+4],w=a[x+5],c&&(u=c[0]*u+c[4]*v+c[8]*
w+c[12],v=c[1]*u+c[5]*v+c[9]*w+c[13],w=c[2]*u+c[6]*v+c[10]*w+c[14]));n+=Math.sqrt((l-h)*(l-h)+(p-k)*(p-k)+(q-m)*(q-m));e[d++]=l;e[d++]=p;e[d++]=q;e[d++]=n;e[d++]=0===t?-1.2:-1;e[d++]=h;e[d++]=k;e[d++]=m;e[d++]=u;e[d++]=v;e[d++]=w;e[d++]=b[0];e[d++]=b[1];e[d++]=b[2];e[d++]=b[3];e[d++]=f[0];e[d++]=l;e[d++]=p;e[d++]=q;e[d++]=n;e[d++]=0===t?1.2:1;e[d++]=h;e[d++]=k;e[d++]=m;e[d++]=u;e[d++]=v;e[d++]=w;e[d++]=b[0];e[d++]=b[1];e[d++]=b[2];e[d++]=b[3];e[d++]=f[0];0<t&&g-1>t&&(e[d++]=l,e[d++]=p,e[d++]=q,e[d++]=
n,e[d++]=-1.2,e[d++]=h,e[d++]=k,e[d++]=m,e[d++]=u,e[d++]=v,e[d++]=w,e[d++]=b[0],e[d++]=b[1],e[d++]=b[2],e[d++]=b[3],e[d++]=f[0],e[d++]=l,e[d++]=p,e[d++]=q,e[d++]=n,e[d++]=1.2,e[d++]=h,e[d++]=k,e[d++]=m,e[d++]=u,e[d++]=v,e[d++]=w,e[d++]=b[0],e[d++]=b[1],e[d++]=b[2],e[d++]=b[3],e[d++]=f[0]);h=l;k=p;m=q;l=u;p=v;q=w}if(this.canBeMerged){for(t=M;M+r>t;t++)e[t]=e[t+r];a=d-r;for(t=0;r>t;t++)e[d++]=e[a++]}},g.prototype.fillWithoutAuxpos=function(a,b,f,c){for(var e,d,g,h=a.length/3,k=0,m=a[0],n=a[1],l=a[2],
p=0;h>p;p++){var q=3*p;e=m;d=n;g=l;m=a[q];n=a[q+1];l=a[q+2];b&&(m=b[0]*m+b[4]*n+b[8]*l+b[12],n=b[1]*m+b[5]*n+b[9]*l+b[13],l=b[2]*m+b[6]*n+b[10]*l+b[14]);k+=Math.sqrt((m-e)*(m-e)+(n-d)*(n-d)+(l-g)*(l-g));f[c++]=m;f[c++]=n;f[c++]=l;f[c++]=k;f[c++]=-1;f[c++]=m;f[c++]=n;f[c++]=l;f[c++]=k;f[c++]=1}},g.loadShaders=function(a,b,f,c){a._parse(N);var e=function(a){a.addDefine("Screen","SCREENSCALE");a.addDefine("Strip","STRIP");a.addDefine("Wall","WALL");a.addDefine("Stipple","STIPPLE")},d=new G("ribbon-line",
["vsRibbonLine","fsRibbonLine"],null,f,b,a,c);e(d);f.addShaderVariations("ribbon-line-material-shader-variations",d);a=new G("ribbon-line",["vsRibbonLine","fsRibbonLineHighlight"],null,f,b,a,c);e(a);f.addShaderVariations("ribbon-line-material-highlight-shader-variations",a)},g}(O.MaterialBase);var V=function(h){function g(a,b){var f=h.call(this,a,b)||this;return f.params=A.copyParameters(a.getParams()),delete f.params.join,f.program=b.getShaderVariationsProgram("ribbon-line-material-shader-variations",
["screen"===f.params.type,"strip"===f.params.type,"wall"===f.params.type,null!=f.params.stippleLength]),f}return B(g,h),g.prototype.updateParameters=function(){var a=this.material.getParams(),b=this.params;b.polygonOffset=a.polygonOffset;b.color=a.color;b.width=a.width;b.miterLimit="miter"===a.join?a.miterLimit:0;b.stippleLength=a.stippleLength},g.prototype.beginSlot=function(a){return a===F.TRANSPARENT_MATERIAL},g.prototype.getProgram=function(){return this.program},g.prototype.bind=function(a,b){var f=
this.program,c=this.params;(a.bindProgram(f),f.setUniform4fv("eColor",c.color),f.setUniform1f("miterLimit",c.miterLimit),f.setUniform1f("nearPlane",b.nearFar[0]),"screen"===c.type?(f.setUniform2fv("screenSize",[b.viewport[2],b.viewport[3]]),f.setUniform1f("extLineWidth",c.width*b.pixelRatio)):f.setUniform1f("extLineWidth",c.width),null!=c.stippleLength)&&f.setUniform1f("stippleLengthDoubleInv",c.stippleLength?1/(2*c.stippleLength):0);c.polygonOffset&&(a.setPolygonOffsetFillEnabled(!0),a.setPolygonOffset(0,
-4));a.setFaceCullingEnabled(!1);a.setBlendingEnabled(!0);a.setBlendFunctionSeparate(a.gl.SRC_ALPHA,a.gl.ONE_MINUS_SRC_ALPHA,a.gl.ONE,a.gl.ONE_MINUS_SRC_ALPHA);a.setDepthTestEnabled(!0);a.setDepthWriteEnabled(1<=c.color[3])},g.prototype.release=function(a){this.params.polygonOffset&&a.setPolygonOffsetFillEnabled(!1);a.setBlendingEnabled(!1);a.setDepthWriteEnabled(!0)},g.prototype.bindView=function(a,b){A.bindView(b.origin,b.view,this.program)},g.prototype.bindInstance=function(a,b){this.program.setUniformMatrix4fv("model",
b.transformation)},g.prototype.getDrawMode=function(a){return a.gl.TRIANGLE_STRIP},g}(E.GLMaterialBase),W=function(h){function g(a,b){var f=h.call(this,a,b)||this;return f.params=A.copyParameters(a.getParams()),delete f.params.join,f.program=b.getShaderVariationsProgram("ribbon-line-material-highlight-shader-variations",["screen"===f.params.type,"strip"===f.params.type,"wall"===f.params.type,null!=f.params.stippleLength]),f}return B(g,h),g.prototype.updateParameters=function(){var a=this.material.getParams(),
b=this.params;b.polygonOffset=a.polygonOffset;b.color=a.color;b.width=a.width;b.miterLimit="miter"===a.join?a.miterLimit:0;b.stippleLength=a.stippleLength},g.prototype.beginSlot=function(a){return a===F.OPAQUE_MATERIAL},g.prototype.getProgram=function(){return this.program},g.prototype.bind=function(a,b){var f=this.program,c=this.params;(a.bindProgram(f),f.setUniform4fv("eColor",c.color),f.setUniform1f("miterLimit",c.miterLimit),f.setUniform1f("nearPlane",b.nearFar[0]),"screen"===c.type?(f.setUniform2fv("screenSize",
[b.viewport[2],b.viewport[3]]),f.setUniform1f("extLineWidth",c.width*b.pixelRatio)):f.setUniform1f("extLineWidth",c.width),null!=c.stippleLength)&&f.setUniform1f("stippleLengthDoubleInv",c.stippleLength?1/(2*c.stippleLength):0);c.polygonOffset&&(a.setPolygonOffsetFillEnabled(!0),a.setPolygonOffset(0,-4));a.setFaceCullingEnabled(!1);a.setDepthTestEnabled(!0);a.setDepthWriteEnabled(1<=c.color[3])},g.prototype.release=function(a){this.params.polygonOffset&&a.setPolygonOffsetFillEnabled(!1);a.setDepthWriteEnabled(!0)},
g.prototype.bindView=function(a,b){A.bindView(b.origin,b.view,this.program)},g.prototype.bindInstance=function(a,b){this.program.setUniformMatrix4fv("model",b.transformation)},g.prototype.getDrawMode=function(a){return a.gl.TRIANGLE_STRIP},g}(E.GLMaterialBase),T=[255,255,255,255],U=[0,0,0,0],l=h.vec3d.create(),p=h.vec3d.create(),q=h.vec3d.create(),C=h.vec3d.create(),y=h.vec2d.create(),z=h.vec2d.create(),K=h.vec3d.create(),L=h.vec3d.create(),R={color:[1,1,1,1],width:0,type:"screen",join:"miter",miterLimit:5,
polygonOffset:!1,stippleLength:null},S=Q.Pos3Tex,I=[{name:"position",count:3,type:5126,offset:0,stride:64,normalized:!1},{name:"uv0",count:2,type:5126,offset:12,stride:64,normalized:!1},{name:"auxpos1",count:3,type:5126,offset:20,stride:64,normalized:!1},{name:"auxpos2",count:3,type:5126,offset:32,stride:64,normalized:!1},{name:"color",count:4,type:5126,offset:44,stride:64,normalized:!1},{name:"size",count:1,type:5126,offset:60,stride:64,normalized:!1}];return D});